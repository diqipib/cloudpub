name: Build Multi-Architecture Binaries

on:
  push:
    tags:
      - '**'  # Trigger on version tags like v1.0.0, v2.1.0, etc.
    branches:
      - '**'  # Trigger on pushes to any branch
  pull_request:
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build multi-architecture binaries with Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        target: artifacts
        platforms: linux/amd64
        outputs: type=local,dest=./artifacts
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: List built artifacts
      run: |
        echo "Built artifacts:"
        find artifacts -type f -exec file {} \;
        ls -la artifacts/*/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cloudpub-binaries-${{ github.sha }}
        path: artifacts/
        retention-days: 30

    - name: Create release assets
      if: github.event_name == 'release'
      run: |
        mkdir -p release-assets
        
        # Create compressed archives for each architecture
        cd artifacts
        
        # Windows x64
        zip -j ../release-assets/cloudpub-win64.zip win64/clo.exe
        
        # Linux x86_64
        tar -czf ../release-assets/cloudpub-linux-x86_64.tar.gz -C x86_64 clo
        
        # Linux ARM64
        tar -czf ../release-assets/cloudpub-linux-aarch64.tar.gz -C aarch64 clo
        
        # Linux ARM
        tar -czf ../release-assets/cloudpub-linux-arm.tar.gz -C arm clo
        
        # Linux ARMv5TE
        tar -czf ../release-assets/cloudpub-linux-armv5te.tar.gz -C armv5te clo
        
        # Linux MIPS (little-endian)
        tar -czf ../release-assets/cloudpub-linux-mipsel.tar.gz -C mipsel clo
        
        # Linux MIPS (big-endian)
        tar -czf ../release-assets/cloudpub-linux-mips.tar.gz -C mips clo
        
        cd ..
        ls -la release-assets/

    - name: Upload release assets
      if: github.event_name == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: cloudpub-release-assets-${{ github.event.release.tag_name }}
        path: release-assets/
        retention-days: 90

  # Auto-create release when pushing to any branch (ignore tags)
  auto-release:
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: cloudpub-binaries-${{ github.sha }}
        path: ./

    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Debug: List what's actually in the artifacts directory
        echo "=== Contents of artifacts directory ==="
        find artifacts -type f -exec ls -la {} \;
        echo "=== Directory structure ==="
        tree artifacts/ || find artifacts -type d
        
        # Create compressed archives for each architecture
        cd artifacts  # Now we go directly to artifacts (no nested structure)
        
        # Windows x64 (check if exists first)
        if [ -f "win64/clo.exe" ]; then
          zip -j ../release-assets/cloudpub-win64.zip win64/clo.exe
          echo "‚úÖ Created cloudpub-win64.zip"
        else
          echo "‚ùå win64/clo.exe not found, skipping Windows build"
        fi
        
        # Linux x86_64 (check if exists first)
        if [ -f "x86_64/clo" ]; then
          tar -czf ../release-assets/cloudpub-linux-x86_64.tar.gz -C x86_64 clo
          echo "‚úÖ Created cloudpub-linux-x86_64.tar.gz"
        else
          echo "‚ùå x86_64/clo not found, skipping x86_64 build"
        fi
        
        # Linux ARM64 (check if exists first)
        if [ -f "aarch64/clo" ]; then
          tar -czf ../release-assets/cloudpub-linux-aarch64.tar.gz -C aarch64 clo
          echo "‚úÖ Created cloudpub-linux-aarch64.tar.gz"
        else
          echo "‚ùå aarch64/clo not found, skipping ARM64 build"
        fi
        
        # Linux ARM (check if exists first)
        if [ -f "arm/clo" ]; then
          tar -czf ../release-assets/cloudpub-linux-arm.tar.gz -C arm clo
          echo "‚úÖ Created cloudpub-linux-arm.tar.gz"
        else
          echo "‚ùå arm/clo not found, skipping ARM build"
        fi
        
        # Linux ARMv5TE (check if exists first)
        if [ -f "armv5te/clo" ]; then
          tar -czf ../release-assets/cloudpub-linux-armv5te.tar.gz -C armv5te clo
          echo "‚úÖ Created cloudpub-linux-armv5te.tar.gz"
        else
          echo "‚ùå armv5te/clo not found, skipping ARMv5TE build"
        fi
        
        # Linux MIPS (little-endian) (check if exists first)
        if [ -f "mipsel/clo" ]; then
          tar -czf ../release-assets/cloudpub-linux-mipsel.tar.gz -C mipsel clo
          echo "‚úÖ Created cloudpub-linux-mipsel.tar.gz"
        else
          echo "‚ùå mipsel/clo not found, skipping MIPS little-endian build"
        fi
        
        # Linux MIPS (big-endian) (check if exists first)
        if [ -f "mips/clo" ]; then
          tar -czf ../release-assets/cloudpub-linux-mips.tar.gz -C mips clo
          echo "‚úÖ Created cloudpub-linux-mips.tar.gz"
        else
          echo "‚ùå mips/clo not found, skipping MIPS big-endian build"
        fi
        
        cd ..
        
        # Show what release assets were created
        echo "=== Created release assets ==="
        ls -la release-assets/ || echo "No release assets created"

    - name: Generate release name
      id: release_name
      run: |
        # Generate a release name based on branch, timestamp and commit
        BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | sed 's/[^a-zA-Z0-9._-]/-/g')
        TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
        SHORT_SHA=${GITHUB_SHA:0:7}
        echo "name=release-${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "tag=v${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      run: |
        # Check if we have any release assets to upload
        if [ ! -d "release-assets" ] || [ -z "$(ls -A release-assets/)" ]; then
          echo "‚ùå No release assets found, skipping release creation"
          exit 1
        fi
        
        echo "üì¶ Creating release with the following assets:"
        ls -la release-assets/
      
    - name: Upload to GitHub Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
        name: ${{ steps.release_name.outputs.name }}
        body: |
          ## CloudPub Auto-Release
          
          Automatic release created from **${{ github.ref_name }}** branch push.
          
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Author**: ${{ github.event.head_commit.author.name }}
          **Message**: ${{ github.event.head_commit.message }}
          **Timestamp**: ${{ github.event.head_commit.timestamp }}
          
          Multi-architecture binaries for CloudPub including MIPS support.
          
          ### Available Architectures:
          See attached files for supported architectures.
          
          Download the appropriate archive for your system architecture.
        files: release-assets/*
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Upload release assets to GitHub Release
  upload-to-release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: cloudpub-release-assets-${{ github.event.release.tag_name }}
        path: release-assets/

    - name: Upload release assets to GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        token: ${{ secrets.GITHUB_TOKEN }}
