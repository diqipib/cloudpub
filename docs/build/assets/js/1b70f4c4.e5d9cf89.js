"use strict";(self.webpackChunk_cloudpub_docs=self.webpackChunk_cloudpub_docs||[]).push([[792],{4736:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"tcp","title":"TCP and UDP Services","description":"Publishing TCP Services","source":"@site/docs/tcp.md","sourceDirName":".","slug":"/tcp","permalink":"/docs/tcp","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"slug":"/tcp"},"sidebar":"tutorialSidebar","previous":{"title":"HTTP and HTTPS Services","permalink":"/docs/http"},"next":{"title":"File Publishing","permalink":"/docs/webdav"}}');var r=i(4848),c=i(8453);const t={sidebar_position:3,slug:"/tcp"},o="TCP and UDP Services",l={},a=[{value:"Publishing TCP Services",id:"publishing-tcp-services",level:2},{value:"Publishing UDP Services",id:"publishing-udp-services",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tcp-and-udp-services",children:"TCP and UDP Services"})}),"\n",(0,r.jsx)(n.h2,{id:"publishing-tcp-services",children:"Publishing TCP Services"}),"\n",(0,r.jsx)(n.p,{children:"Publishing a service running on TCP protocol is done similarly to publishing an HTTP service, but with specifying the TCP protocol:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"clo publish tcp 22\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this example, we are publishing a service running on port 22 (SSH)."}),"\n",(0,r.jsxs)(n.p,{children:["Unlike HTTP services, TCP services do not get a unique domain name and are only available at the address ",(0,r.jsx)(n.code,{children:"tcp.cloudpub.online"})," with a unique port."]}),"\n",(0,r.jsx)(n.p,{children:"Just like with HTTP services, you can specify the address of any host in the local network:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"clo publish tcp myserver:3389\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we are publishing a service running on port 3389 (RDP) on host ",(0,r.jsx)(n.code,{children:"myserver"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"publishing-udp-services",children:"Publishing UDP Services"}),"\n",(0,r.jsx)(n.p,{children:"Publishing a service running on UDP protocol is done similarly to publishing a TCP service, but with specifying the UDP protocol:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"clo publish udp 53\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this example, we are publishing a service running on port 53 (DNS)."})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(6540);const r={},c=s.createContext(r);function t(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);